name: Infrastructure Checks

on:
  push:
    paths:
      - '**/*.tf'
      - '.github/workflows/infrastructure-checks.yml'
  workflow_dispatch:

jobs:
  terraform_validation:
    name: Terraform Lint and Validate
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        # This action installs a specific version of Terraform.
        uses: hashicorp/setup-terraform@f7a3b98da589ab1d52756b0dcee0dbf2de83d635 # 5.100.0
        with:
          terraform_version: 1.9.0 

      - name: Install TFLint
        # Installs TFLint, a static analysis linter for Terraform.
        uses: terraform-linters/setup-tflint@6e13a5d1266a1a375a4778ab4e4ed93e30ea7ca1 # 0.40.0
        with:
          tflint_version: v0.58.0

      - name: Terraform Format Check
        # Checks if Terraform files are correctly formatted.
        # '-check=true' ensures it only checks and doesn't modify.
        # '-diff' shows the differences if formatting is not correct.
        run: |
          echo "Running terraform fmt -check -diff in '/'"
          terraform fmt -check=true -recursive

      - name: Terraform Init (for Validation)
        # Initializes Terraform modules. '-backend=false' is crucial for CI/CD
        # as it avoids configuring a real backend, only downloading providers.
        run: |
          echo "Running terraform init -backend=false in root directory"
          terraform fmt -check=true -diff -recursive 

      - name: Terraform Validate
        # Validates the Terraform configuration files for syntax and consistency.
        run: |
          echo "Running terraform validate in root directory"
          terraform validate

  call_tflint_workflow:
    name: Run Dedicated TFLint
    runs-on: ubuntu-latest
    needs: terraform_validation 
    steps:
      - name: Call TFLint Reusable Workflow
        uses: ./.github/workflows/tflint.yaml@main