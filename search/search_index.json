{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Immutable AWS Backup Terraform module","text":"<p>An open-source public Terraform module to deploy and orchestrate AWS Backup for creating fully immutable backups within an AWS Organization.</p> <ul> <li>Manages the deployment of Backup Vaults to member accounts using CloudFormation StackSets.</li> <li>Allows for targetted deployments to specific Organizations Units (OUs) and prevents cross-talk between deployments.</li> <li>Stores backups in a central AWS account to protect against account closure or suspension.</li> <li>Protects against KMS Key deletion through using AWS Managed and AWS Owned keys.</li> <li>Supports Logically Air Gapped Vaults, with logic to use them only for supported resource types.</li> <li>(Optional) Resource selection using tags.</li> <li>Implements AWS best practice and guidance for security and cost.</li> <li>Simplifies the process of configuring AWS Backup.</li> </ul> <p>See Why use this module? to learn more about the issues this module solves and how it works.</p>"},{"location":"#architecture-and-deployment","title":"Architecture and deployment","text":"<p>The module is designed to be deployed in a dedicated account within an AWS Organization, this account must be delegated certain abilities for the module to function. See our Architecture documentation for a detailed explanation of the architecture and how the module works.</p> <p></p>"},{"location":"#example-usage","title":"Example Usage","text":"<pre><code>module \"immutable_aws_backup\" {\n  source = \"nationalarchives/immutable-aws-backup/aws\"\n  # It's recommended to explicitly constrain the version number to avoid unexpected or unwanted changes.\n\n  central_account_resource_name_prefix = \"immutable-aws-backup-\"\n  member_account_resource_name_prefix  = \"orgdeploy-immutable-aws-backup-\"\n\n  deployments = {\n    \"website-service\" = {\n      backup_targets     = [\"ou-abcd-defghijk\"]\n      min_retention_days = 7\n      max_retention_days = 90\n      backup_tag_key     = \"BackupPlan\"\n      plans = {\n        \"GFS-7-28-90\" : {\n          require_plan_name_resource_tag = true\n          use_logically_air_gapped_vault = false\n          rules = [\n            {\n              name                = \"daily\",\n              schedule_expression = \"cron(0 3 ? * * *)\" # Every day at 3am UTC\n              delete_after_days   = 7\n            },\n            {\n              name                = \"weekly\",\n              schedule_expression = \"cron(0 3 ? * 2 *)\" # Every Monday at 3am UTC\n              delete_after_days   = 28\n            },\n            {\n              name                = \"monthly\",\n              schedule_expression = \"cron(0 3 1 * ? *)\" # Every 1st of the month at 3am UTC\n              delete_after_days   = 90\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"#about-the-national-archives-uk","title":"About The National Archives, UK","text":"<p>We are a non-ministerial department, and the official archive and publisher for the UK Government, and for England and Wales. We are the guardians of over 1,000 years of iconic national documents.</p> <p>We are expert advisers in information and records management and are a cultural, academic and heritage institution. We fulfil a leadership role for the archive sector and work to secure the future of physical and digital records.</p> <p>Find out more about what we do.</p>"},{"location":"architecture/","title":"Module Architecture","text":"<p>The module is designed to be deployed in a dedicated account within an AWS Organization, this account must be delegated certain abilities for the module to function.</p> <p>One call of this module can deploy multiple instances of AWS Backup, each with a different configuration and to different Organizational Units; we call each of these a \"deployment\". Deployments act as a security boundary between instances; accounts targetted by one deployment cannot influence the backups of another deployment. The diagram below shows the architecture of a single deployment.</p> <p></p> <p>Each deployment orchestrates the creation of resources in both the Backup account and the Workload accounts. Resources created in the Backup account are:</p> <ul> <li>3x Backup Vaults - a Logically Air Gapped (LAG) Vault, an Intermediate Standard Vault, and a Standard Vault.</li> <li>An IAM Service Role for AWS Backup.</li> <li>An EventBridge Event Bus to receive AWS Backup events from the Workload accounts.</li> <li>An EventBridge Rule to forward AWS Backup events from the default bus to the deployment's Event Bus.</li> <li>A Step Function to copy backups from the Intermediate Standard Vault to the Standard Vault and update the lifecycle of backups that have been copied.</li> <li>A CloudFormation StackSet to deploy resources in the workload accounts.</li> <li>A KMS Customer Managed Key to encrypt backups in the Intermediate Vault and workload account vaults.</li> <li>A Resource Access Manager (RAM) Share to share the Logically Air Gapped (LAG) Vault with the Workload accounts for recovery.</li> <li>A Step Function to manage the copying of backups from the Standard Vault back to workload accounts for recovery.</li> </ul> <p>Additional resources are created in the central Backup account to support deployment to workload accounts, as detailed below.</p>"},{"location":"architecture/#resources-in-workload-accounts","title":"Resources in workload accounts","text":"<p>Each deployment orchestrates the creation of resources in workload accounts through CloudFormation StackSets. The module uses CloudFormation as it enables deployment to many AWS accounts without the need to configure and manage a Terraform provider for each account. StackSets work natively within AWS, reacting when accounts are moved between Organizations and Organizational Units to provision and destroy resources depending on their location within an Organization.</p> <p>However, as CloudFormation is a declarative syntax for provisioning resources, even more so than Terraform, some of the workload account deployment functionality has been implemented through custom resources - an AWS Lambda calling the AWS API or running Terraform itself. For example, creating the AWS Backup Service-linked IAM Role will only succeed if this role doesn't already exist; by using a custom Lambda function this error can be caught and ignored. Terraform is used to deploy the Backup Vaults within workload accounts as it includes a <code>force_destroy</code> option that will empty a Vault before deleting it, whereas CloudFormation would fail to delete a Vault with content.</p> <p></p> <p>The \"Deployment Helper\" Lambda Function is deployed once in the dedicated Backup account. It is invoked by an SNS topic in the Backup account which recieves messages from CloudFormation stacks within the workload accounts. The Lambda function then deploys resources into the workload accounts. The resources created to support this are:</p> <ul> <li>An SNS topic to receive messages from CloudFormation stacks in workload accounts.</li> <li>An S3 Terraform state bucket, if not passed in as a variable.</li> <li>A Lambda function to deploy resources in workload accounts.</li> <li>An execution IAM Role for the Lambda Function.</li> <li>A CloudWatch Log Group for the Lambda Function.</li> </ul> <p>Within each workload account, for each deployment, the following resources are created:</p> <ul> <li>Backup Vault</li> <li>Restore Vault</li> <li>AWS Backup Service-linked IAM Role</li> <li>AWS Backup Service Role</li> <li>EventBridge Rule forwarding AWS Backup events</li> </ul>"},{"location":"usage-backing-up-your-resources/","title":"Backing up your resources","text":"<p>This document provides guidance on how to back up resources using this Terraform module. It will not repeat the documentation provided by AWS Backup, but will instead focus on the specific requirements and configurations needed for this module to work as expected.</p>"},{"location":"usage-backing-up-your-resources/#dynamodb","title":"DynamoDB","text":"<p>AWS Backup advanced features for DynamoDB must be enabled within the workload accounts.</p>"},{"location":"usage-backing-up-your-resources/#kms-encryption-of-resources","title":"KMS Encryption of resources","text":""},{"location":"usage-backing-up-your-resources/#aws-managed-kms-keys","title":"AWS Managed KMS Keys","text":"<p>Immediate backups of resource types that are not \"fully managed\" by AWS Backup will retain the encryption configuration of the source resource. When backups are copied, this will change to the encryption key of the destination Backup Vault. Backups of resources that are encrypted with an AWS managed KMS Key - a key with an alias starting <code>aws/</code> - cannot be copied cross-account so will fail to copy to the central account Backup Vault to be held immutably.</p>"},{"location":"usage-backing-up-your-resources/#customer-managed-kms-keys","title":"Customer Managed KMS Keys","text":"<p>Backups of resource types that are \"fully managed\" by AWS Backup use the encryption key of the Backup Vault they are stored in. As the re-encryption happens during the Backup Job, the source encryption must allow the deployment's Backup Service Role within the same account to decrypt the data.</p> <p>Backups of resource types that are not \"fully managed\" by AWS Backup within the workload accounts will retain the encryption configuration of the source resource until they are copied to another Backup Vault. To ensure that backups can be copied to the central account Backup Vault, the source KMS Key must allow the deployment's Backup Service Role and the central Backup accounts Service-linked Role to to decrypt the data.</p> <p>Ensure that the statements below are included within the Key Policy of the customer managed KMS Key used to encrypt the source resources, these have been derived from AWS Guidelines.</p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        ...\n        {\n      \"Sid\": \"Allow AWS Backup to use the key for backup and cross-account copy\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": [\n          \"arn:aws:iam::${WorkloadAccountID}:role/${DeploymentBackupServiceRoleName}\",\n          \"arn:aws:iam::${CentralBackupAccountID}:role/aws-service-role/backup.amazonaws.com/AWSServiceRoleForBackup\"\n        ]\n      },\n      \"Action\": [\n        \"kms:DescribeKey\",\n        \"kms:Encrypt\",\n        \"kms:Decrypt\",\n        \"kms:ReEncrypt*\",\n        \"kms:GenerateDataKey\",\n        \"kms:GenerateDataKeyWithoutPlaintext\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"Allow AWS Backup to manage grants for backup and cross-account copy\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": [\n          \"arn:aws:iam::${WorkloadAccountID}:role/${DeploymentBackupServiceRoleName}\",\n          \"arn:aws:iam::${CentralBackupAccountID}:role/aws-service-role/backup.amazonaws.com/AWSServiceRoleForBackup\"\n        ]\n      },\n      \"Action\": [\n        \"kms:CreateGrant\",\n        \"kms:ListGrants\",\n        \"kms:RevokeGrant\"\n      ],\n      \"Resource\": \"*\",\n      \"Condition\": {\n        \"Bool\": {\n          \"kms:GrantIsForAWSResource\": \"true\"\n        }\n      }\n    }\n    ]\n}\n</code></pre>"},{"location":"usage-backing-up-your-resources/#s3","title":"S3","text":"<p>S3 is \"fully managed\" by AWS Backup, so only the deployment's Backup Service Role within the same account needs access to the data.</p> <p>When <code>create_continuous_backups</code> or <code>snapshot_from_continuous_backups</code> is enabled on a plan targetting the bucket, a continuous backup will be created in the workload account Backup Vault. Snapshots will then be taken from the continuous backup and copied to the central account Backup Vault, in line with AWS best practice.</p> <p>To ensure your objects are backed up, see the prerequisites from AWS.</p>"},{"location":"usage-configuration/","title":"Configuration","text":"<p>The module is designed to be deployed only once per Organization, it can be deployed multiple times as long as <code>central_account_resource_name_prefix</code> is unique to each module call. Within the configuration of the module you can define multiple deployments to target areas of your organization with tailored backup plans.</p>"},{"location":"usage-configuration/#inputs","title":"Inputs","text":"Name Description Type Default Required central_account_resource_name_prefix Prefix to be used for resource names in the central account. <code>string</code> yes deployments A map of deployments, see Deployments <code>map(object)</code> yes member_account_resource_name_prefix Prefix to be used for resource names in member accounts. <code>string</code> yes terraform_state_bucket_name Name of the S3 bucket used for storing Terraform state files for resources in workload accounts. If not specified, an S3 bucket will be created in the central account. <code>string</code> no"},{"location":"usage-configuration/#deployments","title":"Deployments","text":"<p>A deployment is an instance of the backup solution. Within the deployment account it creates a single set of resources (Backup Vaults, KMS Key, CloudFormation StackSet, etc.) that can then be used by multiple workload accounts. Deployments create a security boundary for your backups. Deployments are passed to the module as a map, the key value for each deployment is used to generate unique resource names within the deployment account and workload accounts.</p> Name Description Type Default Required admin_role_names A list of role names that will have administrator abilities in member accounts. For example, administering the Backup Vaults. <code>list(string)</code> <code>[]</code> no allow_backup_targets_to_restore Allow restores within the <code>backup_targets</code> workload accounts. This will share the LAG Vault back to workload accounts through AWS RAM. <code>bool</code> <code>false</code> no backup_tag_key The tag key to query when <code>require_plan_name_resource_tag</code> is enabled within a plan. <code>string</code> <code>null</code> no backup_targets A list of Organizational Unit IDs to deploy the backup solution to. The module will deploy to all accounts within these OUs. <code>list(string)</code> yes max_retention_days The maximum retention to configure on the Backup Vaults. Required when a plan is using a LAG Vault. <code>number</code> <code>null</code> no min_retention_days The minimum retention to configure on the Backup Vaults. Required when a plan is using a LAG Vault. <code>number</code> <code>null</code> no plans A map of backup plans to implement, see Plans. <code>map(object)</code> yes retained_vaults A list of previously deployed Backup Vault configurations. This is used to retain Vaults that were previously configured and are now locked, preventing deletion. This is useful when changing the configuration of a deployment, such as changing the minimum or maximum retention days. <code>list(object({ min_retention_days = number, max_retention_days = number, use_logically_air_gapped_vault = optional(bool, false) }))</code> <code>[]</code> no"},{"location":"usage-configuration/#plans","title":"Plans","text":"<p>A plan defines a selection of resources and a list of rules (when your backups should be taken) for AWS Backup to orchestrate. This module generates AWS Backup Plans based upon the configuration made here; the module implements additional functionality to simplify the configuration of AWS Backup and implement AWS guidance. Plans are passed to the module as a map, the key value for each plan is used to identify the plan and filter by resource tag when <code>require_plan_name_resource_tag</code> is enabled.</p> Name Description Type Default Required complete_backup_window_minutes Number of minutes after a backup job is successfully started before it must be completed or it will be canceled by AWS Backup. <code>number</code> <code>null</code> no continuous_backup_schedule_expression A cron expression for when to create Continuous Backups of supported and enabled resources. It is recommended to set this outside of the backup windows defined in your rules and to run it regularly. <code>string</code> <code>\"cron(0 0 ? * * *)\"</code> no create_continuous_backups Create continuous backups for resources that support it to enable point in time recovery within the same account. These backups are not copied to the immutable backup vaults.Supported resource types: RDS database instances, SAP HANA, S3. <code>bool</code> <code>false</code> no intermediate_retention_days The number of days to retain backups in the Intermediate Vault once copied to the Immutable Vault. Persisting backups in this vault can reduce copy latency through incremental backups. If not set will use the rule's <code>delete_after_days</code> configuration or 7 days if null. Can be overridden by setting on the rule. <code>number</code> Rule's <code>delete_after_days</code> or <code>7</code> no local_retention_days The number of days to retain backups in the workload account vaults once copied to the Intermediate or LAG vaults. Persisting backups in this vault can reduce backup latency through incremental backups. If not set will use the rule's <code>delete_after_days</code> configuration. Can be overridden by setting on the rule. This does not affect Continuous Backups. <code>number</code> Rule's <code>delete_after_days</code> no require_plan_name_resource_tag Only backup resources that have a resource tag with key <code>backup_tag_key</code> and value matching the plan name. <code>bool</code> <code>true</code> no snapshot_from_continuous_backups Create continuous backups for resources that support it and then generate snapshot backups from these. Recommended by AWS to reduce cost.Supported resource types: S3. <code>bool</code> <code>true</code> no start_backup_window_minutes Number of minutes to wait for a backup job to start before cancelling it. If this value is included, it must be at least 60 minutes to avoid errors. <code>number</code> <code>null</code> no use_logically_air_gapped_vault Copy backups to a Logically Air Gapped Vault for supported resource types. Logically Air Gapped Vaults enable faster recovery as backups can be restored cross-account. <code>bool</code> <code>false</code> no rules A list of backup rules to implement, defining when backups should be taken. Where rules have overlapping start windows, the rule with the greatest <code>delete_after_days</code> value will run. See Rules. <code>list</code> yes"},{"location":"usage-configuration/#rules","title":"Rules","text":"<p>A rule defines when backups should be taken and how long they should be kept for. Where rules within a plan have overlapping start windows, the rule with the greatest <code>delete_after_days</code> value will run.</p> Name Description Type Default Required complete_backup_window_minutes Number of minutes after a backup job is successfully started before it must be completed or it will be canceled by AWS Backup. Overrides the value set on the plan. <code>number</code> <code>null</code> no delete_after_days The number of days a backup should be retained for. Required when the plan is using a LAG Vault. <code>number</code> <code>null</code> no intermediate_retention_days The number of days to retain backups in the Intermediate Vault once copied to the Immutable Vault. Overrides the value set on the plan. <code>number</code> <code>null</code> no local_retention_days The number of days to retain backups in the workload account vaults once copied to the Intermediate or LAG vaults. Overrides the value set on the plan. <code>number</code> <code>null</code> no name A friendly name for the rule. <code>string</code> Rule's index number no schedule_expression A cron expression for when to start the backup window. <code>string</code> yes start_backup_window_minutes Number of minutes to wait for a backup job to start before cancelling it. If this value is included, it must be at least 60 minutes to avoid errors. Overrides the value set on the plan. <code>number</code> <code>null</code> no"},{"location":"usage-prerequisites/","title":"Prerequisites","text":"<p>It is strongly recommended that this module is deployed into a dedicated AWS Backup account within your AWS Organization.</p> <p>The module is designed to be deployed into a delegated administrator account within an AWS Organization, it assumes that these requirements are met when deploying:</p> <ul> <li>All features are enabled for your AWS Organization.</li> <li>Trusted access with AWS Backup and Resource Access Manager (RAM) is enabled on your Organization.</li> <li>Backup Policies are enabled within your Organization.</li> <li>Enable cross-account backup is turned on within your Organization.</li> <li>AWS Backup cross-account monitoring is enabled within your Organization.</li> <li>The account you are deploying to has been delegated to manage AWS Backup.</li> <li>The account you are deploying to has been delegated to manage CloudFormation StackSets.</li> <li>The account you are deploying to has permission to manage Backup Policies, as detailed in our example resource-based delegation policy.</li> </ul>"},{"location":"usage-prerequisites/#example-organization-resource-based-delegation-policy","title":"Example organization resource-based delegation policy","text":"<p>The account to which you are deploying this module requires permission to manage Backup Policies through your Organization's resource-based delegation policy.</p> <p>An example resource-based delegation policy is provided below, derived from AWS guidelines.</p> <ul> <li>In the console for your AWS management account, navigate to AWS Organizations -&gt; Settings -&gt; Delegated administrator for AWS Organizations -&gt; Delegate.</li> <li>Press Delegate to create delegation policy.</li> <li>Copy and paste the contents below;</li> <li>replace <code>${aws_backup_account_id}</code> with the AWS Account ID of your Backup account,</li> <li>replace <code>${management_account_id}</code> with the AWS Account ID of your Management account,</li> <li>replace <code>${org_id}</code> with your Organization ID.</li> </ul> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"AllowBackupDelegateOrganizationsReadAndTag\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::${aws_backup_account_id}:root\"\n      },\n      \"Action\": [\n        \"organizations:Describe*\",\n        \"organizations:List*\",\n        \"organizations:TagResource\",\n        \"organizations:UntagResource\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"AllowBackupDelegatePolicyCreation\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::${aws_backup_account_id}:root\"\n      },\n      \"Action\": [\n        \"organizations:CreatePolicy\"\n      ],\n      \"Resource\": \"*\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"organizations:PolicyType\": \"BACKUP_POLICY\"\n        }\n      }\n    },\n    {\n      \"Sid\": \"AllowBackupDelegatePolicyModification\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::${aws_backup_account_id}:root\"\n      },\n      \"Action\": [\n        \"organizations:DeletePolicy\",\n        \"organizations:UpdatePolicy\"\n      ],\n      \"Resource\": \"arn:aws:organizations::${management_account_id}:policy/*/backup_policy/*\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"organizations:PolicyType\": \"BACKUP_POLICY\"\n        }\n      }\n    },\n    {\n      \"Sid\": \"AllowBackupDelegateToAttachDetachPoliciesWithinProjectScope\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::${aws_backup_account_id}:root\"\n      },\n      \"Action\": [\n        \"organizations:AttachPolicy\",\n        \"organizations:DetachPolicy\"\n      ],\n      \"Resource\": [\n        \"arn:aws:organizations::${management_account_id}:policy/*/backup_policy/*\",\n        \"arn:aws:organizations::${management_account_id}:account/${org_id}/*\",\n        \"arn:aws:organizations::${management_account_id}:ou/${org_id}/*\",\n        \"arn:aws:organizations::${management_account_id}:root/${org_id}/*\"\n      ],\n      \"Condition\": {\n        \"StringEquals\": {\n          \"organizations:PolicyType\": \"BACKUP_POLICY\"\n        }\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"usage-restoring-your-backups/","title":"Restoring from backups","text":"<p>Backups can be restored in the dedicated backup account or within the workload accounts targeted by the deployment. The module implements protections to prevent a backup from one deployment being restored to an account within a different deployment.</p>"},{"location":"usage-restoring-your-backups/#restoring-from-logically-air-gapped-vaults","title":"Restoring from Logically Air Gapped Vaults","text":"<p>Logically Air Gapped Vaults allow restores to be performed directly within the workload accounts. The LAG Vault must first be shared with the workload account using AWS RAM, then a principal in the workload account can restore the backup using the AWS Backup console or CLI.</p> <p>To enable AWS RAM sharing to the workload accounts, set allow_backup_targets_to_restore to <code>true</code> within the deployment configuration, then re-apply Terraform.</p> <p>To restore a backup from a LAG Vault, follow the steps in Restore a backup from a logically air-gapped vault from the AWS documentation. The module deploys an IAM Role, <code>...-backup-service-restore-role</code>, to each workload account that can be passed to the restore job.</p>"},{"location":"usage-restoring-your-backups/#restoring-from-the-standard-backup-vaults","title":"Restoring from the Standard Backup Vaults","text":"<p>Backups held in the central <code>-intermediate-</code> or <code>-standard-</code> vaults need copying to a Backup Vault within the workload account before they can be restored. The module provides a Step Function to perform a series of copy operations to copy the backup to the workload account Backup Vaults. When the copy is complete, the backup will be available to restore using the AWS Backup console or CLI.</p> <p>To start the copy action back to a workload account, start a new execution of the Restore Step Function for the deployment within the dedicated backup account; the Step Function expects an input with the following structure:</p> <pre><code>{\n  \"destinationAccount\": \"222222222222\",\n  \"recoveryPointArn\": \"arn:aws:backup:eu-west-1:111111111111:recovery-point:website-logs-20250708044140-61ebc5da\",\n  \"sourceBackupVaultName\": \"aws-backup-my-deployment-standard-30-365\"\n}\n</code></pre> <p>The Step Function will copy the backup to the <code>-intermediate-</code> Backup Vault, re-encrypting the backup to use a customer managed KMS Key, then cross-account to the destination account's <code>-cmk</code> Backup Vault, and finally to the destination account's <code>-default</code> Backup Vault. The resultant backup will be encrypted with an AWS Managed KMS Key in the destination account. The backup may need copying once again within the destination account for the restored resource to use the correct encryption key for the workload.</p> <p>Once the backup is within the destination account, the steps to restore in the AWS documentation can be followed, Restore a backup by resource type. The module deploys an IAM Role, <code>...-backup-service-restore-role</code>, to each workload account that can be passed to the restore job.</p>"},{"location":"usage-restoring-your-backups/#restoring-from-the-cmk-backup-vault-within-a-workload-account","title":"Restoring from the <code>-cmk</code> backup vault within a workload account","text":"<p>For resource types that are not \"fully managed\" by AWS Backup, backups taken into the <code>-cmk</code> Backup Vault will retain the encryption configuration of the source resource. This means that the backup can be restored directly by principals within the account, without needing to copy it to another Backup Vault. This only applies to backups that were written directly to this vault, not those copied to the account from the dedicated backup account.</p>"},{"location":"why-use-this-module/","title":"Why use this module?","text":"<p>AWS Backup is a fully-managed service that makes it easy to centralize and automate data protection across AWS services. AWS Backup allows the implementation of Backup Plans (Policies when applied to an AWS Organization) to manage the backing up of resources within AWS.</p> <p>Although AWS Backup supports deployment of Backup Policies via AWS Organizations, some resources are expected to exist in member accounts before the applied policies will function.</p> <p>AWS Backup acts as a shim over the existing AWS service APIs to orchestrate and manage backups. For example, backups of RDS databases utilise the existing snapshot mechanisms within RDS. Some services, like S3, do not have a native backup solution, so have implemented workflows specifically for AWS Backup. For this reason, AWS Backup behaves differently depending on the underlying resource type being backed up. In some cases, AWS Backup can grant unexpected access to your data.</p> <p>This module aims to simplify the process of deploying AWS Backup within an AWS Organization. It will deploy the necessary resources to member accounts and create Backup Policies that implement guidance from AWS. The module then goes further to protect your backups by implementing additional functionality to store your backups immutably and with least privilege permissions to ensure data in backups cannot be accessed by unauthorised principals.</p>"},{"location":"why-use-this-module/#what-about-vault-lock","title":"What about Vault Lock?","text":"<p>Immutability within AWS Backup is achieved through the use of Compliance mode vault locking. However, whilst this prevents the recovery points within the vault from being deleted, it does not extend the same protections to the KMS Key used to encrypt them. A malicious user would only need to delete this KMS Key to make the data within the backups inaccessible.</p> <p>Protecting a KMS Key is much more difficult. Although keys cannot be deleted immediately, they can be scheduled for deletion with only 7 days grace. Keys can be protected through Key Policies, such as removing the ability to schedule key deletions or update the key policy, but this is a known issue within AWS and has a well documented path to recover these abilities through opening a case with AWS Support.</p> <p>AWS identified this issue and launched Logically Air Gapped (LAG) Vaults; among other features, these vaults re-encrypt their contents with an AWS Owned Key. But, not all AWS resource types are supported by LAG Vaults, creating a complex matrix of resources and vault types.</p> <p>This module solves these issues by moving backups to a vault encrypted with an AWS Managed Key. Both AWS Managed and AWS Owned Keys cannot be deleted by principals within an AWS account. When the <code>use_logically_air_gapped_vault</code> option is enabled within a plan, only resources that are not supported by LAG Vaults are handled in this way, reducing the time and complexity to recover.</p>"},{"location":"why-use-this-module/#how-can-aws-backup-grant-access-to-data","title":"How can AWS Backup grant access to data?","text":"<p>Some services within AWS Backup are \"fully managed\". These services simplify the backup lifecycle by automatically re-encrypting the data during a Backup Job using the KMS Key of the target Backup Vault. Whilst this is convenient and defends against the deletion of the source KMS Key, it creates another Key to manage which can have different access permissions. In accounts where permissions are not managed carefully, this can lead to data being accessible to principals that should not have access. For example, a user who couldn't GetObject in an S3 bucket could restore the backup to a new bucket then access the data.</p>"}]}